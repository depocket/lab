package templates

var DAppsIntegrationTemplate = `
/*
 * This code generated by DePocket CLI
 * to support to integration {{ .ProjectName }} dApps on {{ .ChainName }} chain
 */
package {{ .ProjectName }}

import (
	"github.com/depocket/lab/base"
	"github.com/depocket/lab/sdk"
)

type {{ .ChainSnakeCase }}Service struct {
	Client *sdk.Client
	Tokens []sdk.Token
}

func (s *{{ .ChainNameCamelCase }}Service) Code() string {
	return "{{ .ChainName }}_{{ .ProjectName }}"
}

func (s *{{ .ChainNameCamelCase }}Service) Name() string {
	return "{{ .ProjectNameCamelCase }}"
}

func (s *{{ .ChainNameCamelCase }}Service) Tags() []string {
	panic("implement me")
}

func (s *{{ .ChainNameCamelCase }}Service) Description() string {
	panic("implement me")
}

func (s *{{ .ChainNameCamelCase }}Service) Url() string {
	panic("implement me")
}

func (s *{{ .ChainNameCamelCase }}Service) Links() map[string]string {
	panic("implement me")
}

func (s *{{ .ChainNameCamelCase }}Service) SupportedNetworks() []string {
	panic("implement me")
}

func (s *{{ .ChainNameCamelCase }}Service) Groups() []base.BalanceGroup {
	panic("implement me")
}

func (s *{{ .ChainNameCamelCase }}Service) FetchBalances() ([]base.Balance, error) {
	panic("implement me")
}

func (s *{{ .ChainNameCamelCase }}Service) FetchStakingBalance() (base.Balance, error) {
	panic("implement me")
}

func (s *{{ .ChainNameCamelCase }}Service) FetchFarmingBalance() (base.Balance, error) {
	panic("implement me")
}

func (s *{{ .ChainNameCamelCase }}Service) FetchLendingBalance() (base.Balance, error) {
	panic("implement me")
}

func (s *{{ .ChainNameCamelCase }}Service) FetchBorrowBalance() (base.Balance, error) {
	panic("implement me")
}
`
